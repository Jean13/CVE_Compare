'''
Compare CSV file of installed packages against JSON CVE data.
Outputs a file with content that shows:
    * Vendor Name
    * Vulnerable Software
    * Software Version
    * CVE Name
    * CVSS V3 Base Severity
    * CVE Description
'''


from datetime import datetime
import json
import numpy as np


def vulnerability_scan(current_year, nvd_file, current_date):
    # Installed packages file
    host_file = str(current_year) + "_installed.txt"
    with open(host_file, "r", encoding="latin-1") as fd:
        installed_data = fd.readlines()

    # NVD CVE file
    with open(nvd_file, "r", encoding="latin-1") as f:
        cve_data = json.load(f)

    # Identify vulnerable software via comparison of installed packages against NVD
    vulnerable_list = []

    for j in cve_data["CVE_Items"]:
        for i in installed_data:
            split_content = i.split(",")
            try:
                # Installed Packages Data
                installed_name = split_content[0]
                installed_name = installed_name.replace(' ', '_').lower()
                installed_version = split_content[1]

                # Vulnerable Software Data
                vendor = j["cve"]["affects"]["vendor"]["vendor_data"][0]["vendor_name"]
                product = j["cve"]["affects"]["vendor"]["vendor_data"][0]["product"]["product_data"][0]["product_name"]
                version = j["cve"]["affects"]["vendor"]["vendor_data"][0]["product"]["product_data"][0]["version"]["version_data"][0]["version_value"]
                cve_id = j["cve"]["CVE_data_meta"]["ID"]
                # CVE CVSS V3 Base Severity
                cve_severity = j["impact"]["baseMetricV3"]["cvssV3"]["baseSeverity"]
                # CVE Description
                cve_description = j["cve"]["description"]["description_data"][0]["value"]

                '''
                Performing matching.
                If installed packages are present in NVD CVE data file, identify it.
                '''
                try:
                    if product in installed_name and version in installed_version:
                        vulnerable_package = vendor + " " + product + " " + version + " | " + \
                        cve_id + " | Severity: " + cve_severity + " | Description: " + cve_description

                        vulnerable_list.append(vulnerable_package)

                except Exception as e:
                    print(e)

            except:
                pass

    # Unique list of vulnerable packages; Raw has duplicates
    unique_array = np.unique(vulnerable_list)
    print("[!] Vulnerabilities found:")

    # Print statement depending on whether vulnerabilities were found or not
    if len(unique_array) == 0:
        print("[*] No vulnerabilities found.")
    else:
        print(unique_array)
    print("")

    # Save the discovered vulnerabilities to a timestamped text file.
    latest_scan = current_date + "_vulnerability_scan.txt"

    try:
        with open(latest_scan, 'a+') as f:
            for item in unique_array:
                f.write("{}\n\n".format(item))

    except Exception as e:
        print(e)


def main():
    # Date information
    now = datetime.now()
    current_year = now.year
    current_month = str(now.month)
    current_day = str(now.day)
    current_date = str(current_year) + current_month + current_day

    # Oldest available year in JSON format
    year = 2002

    # Run vulnerability scan
    while year <= current_year:
        try:
            nvd_file = "nvdcve-1.0-" + str(year) + ".json"

            print(str(year))
            vulnerability_scan(current_year, nvd_file, current_date)

            # Update year to scan next file
            year += 1
        except Exception as e:
            print(e)


main()
